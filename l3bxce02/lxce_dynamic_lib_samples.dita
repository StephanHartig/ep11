<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-reference.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<reference id="l31xce00_dynamic_lib_samples" xml:lang="en-us">
  <title>Dynamic library call</title>
  <shortdesc>View a <keyword conref="lxce_conref.dita#l31xce00_conref/ocrypto"/> code sample for
    a dynamic library call.</shortdesc>
  <?Pub Caret 22?>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>dynamic library call</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section>
      <screen>
#include &lt;stdlib.h>
#include &lt;errno.h>
#include &lt;stdio.h>
#include &lt;dlfcn.h>
#include &lt;pkcs11types.h>

CK_RV init();
CK_RV cleanup();
CK_RV rc;                                   /* return code */
void *dllPtr, (*symPtr)();                  /* pointer to the ock library */
CK_FUNCTION_LIST_PTR  FunctionPtr = NULL;   /* pointer to function list */

int main(int argc, char *argv[]){
  init(“/usr/lib64/opencryptoki/libopencryptoki.so”); /* opencryptoki initialization */
  /* …. other opencryptoki commands.... */
  cleanup();						  /* cleanup/close shared library */
  return 0;
}

CK_RV init(char *libPath){ 
    
  dllPtr = dlopen(libPath, RTLD_NOW);       /* open the PKCS11 library */
  if (!dllPtr) { 
     printf("Error loading PKCS#11 library \n"); 
     return errno; 
  } 
  symPtr = (void (*)())dlsym(dllPtr, "C_GetFunctionList"); /* Get ock function list */
  if (!symPtr) { 
     printf("Error getting function list \n"); 
     return errno; 
  } 
  symPtr(&amp;FunctionPtr);    
  rc = FunctionPtr->C_Initialize(NULL);     /* initialize opencryptoki/tokens) */    
   if (rc != CKR_OK) {        
    printf("Error initializing the opencryptoki library: 0x%X\n", rc);        
    cleanup();
    }     
    printf("Opencryptoki initialized.\n");
    return CKR_OK;
}

  CK_RV cleanup(void) {
      rc = FunctionPtr->C_Finalize(NULL);
      if (dllPtr)
          dlclose(dllPtr);
      return rc; 
}</screen>
    </section>
  </refbody>
</reference>
<?Pub *0000002748?>
